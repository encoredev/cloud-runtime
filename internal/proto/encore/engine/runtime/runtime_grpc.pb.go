// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package runtime

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RuntimeClient is the client API for Runtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeClient interface {
	RecordTrace(ctx context.Context, in *RecordTraceRequest, opts ...grpc.CallOption) (*RecordTraceResponse, error)
	Secrets(ctx context.Context, in *SecretsRequest, opts ...grpc.CallOption) (*SecretsResponse, error)
}

type runtimeClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeClient(cc grpc.ClientConnInterface) RuntimeClient {
	return &runtimeClient{cc}
}

func (c *runtimeClient) RecordTrace(ctx context.Context, in *RecordTraceRequest, opts ...grpc.CallOption) (*RecordTraceResponse, error) {
	out := new(RecordTraceResponse)
	err := c.cc.Invoke(ctx, "/encore.engine.runtime.Runtime/RecordTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) Secrets(ctx context.Context, in *SecretsRequest, opts ...grpc.CallOption) (*SecretsResponse, error) {
	out := new(SecretsResponse)
	err := c.cc.Invoke(ctx, "/encore.engine.runtime.Runtime/Secrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServer is the server API for Runtime service.
// All implementations should embed UnimplementedRuntimeServer
// for forward compatibility
type RuntimeServer interface {
	RecordTrace(context.Context, *RecordTraceRequest) (*RecordTraceResponse, error)
	Secrets(context.Context, *SecretsRequest) (*SecretsResponse, error)
}

// UnimplementedRuntimeServer should be embedded to have forward compatible implementations.
type UnimplementedRuntimeServer struct {
}

func (*UnimplementedRuntimeServer) RecordTrace(context.Context, *RecordTraceRequest) (*RecordTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordTrace not implemented")
}
func (*UnimplementedRuntimeServer) Secrets(context.Context, *SecretsRequest) (*SecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Secrets not implemented")
}

func RegisterRuntimeServer(s *grpc.Server, srv RuntimeServer) {
	s.RegisterService(&_Runtime_serviceDesc, srv)
}

func _Runtime_RecordTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).RecordTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/encore.engine.runtime.Runtime/RecordTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).RecordTrace(ctx, req.(*RecordTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_Secrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).Secrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/encore.engine.runtime.Runtime/Secrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).Secrets(ctx, req.(*SecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Runtime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "encore.engine.runtime.Runtime",
	HandlerType: (*RuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordTrace",
			Handler:    _Runtime_RecordTrace_Handler,
		},
		{
			MethodName: "Secrets",
			Handler:    _Runtime_Secrets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encore/engine/runtime/runtime.proto",
}
